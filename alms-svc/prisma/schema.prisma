generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AssetStatus {
  ACTIVE
  UNDER_MAINTENANCE
  RETIRED
  DISPOSED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  INSPECTION
  CALIBRATION
}

enum WorkOrderStatus {
  OPEN
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DepreciationMethod {
  STRAIGHT_LINE
  DECLINING_BALANCE
  NONE
}

model Asset {
  id              BigInt      @id @default(autoincrement())
  assetCode       String      @unique
  itemId          BigInt?
  serialNo        String?
  category        String?
  purchaseDate    DateTime?
  acquisitionCost Decimal?
  vendorId        BigInt?
  warrantyUntil   DateTime?
  status          AssetStatus @default(ACTIVE)
  locationId      BigInt?
  notes           String?

  depreciation AssetDepreciation?
  transfers    AssetTransfer[]
  workOrders   MaintenanceWorkOrder[]
  repairs      RepairLog[]
  disposal     AssetDisposal?

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  MaintenanceSchedule MaintenanceSchedule[]

  @@index([serialNo])
  @@index([locationId])
}

model AssetDepreciation {
  id          BigInt             @id @default(autoincrement())
  assetId     BigInt             @unique
  method      DepreciationMethod @default(STRAIGHT_LINE)
  lifeMonths  Int?
  salvage     Decimal?
  startedAt   DateTime?
  accumulated Decimal            @default(0)

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model MaintenanceSchedule {
  id           BigInt          @id @default(autoincrement())
  assetId      BigInt
  type         MaintenanceType
  intervalDays Int?
  nextDue      DateTime?
  notes        String?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, nextDue])
}

model MaintenanceWorkOrder {
  id          BigInt          @id @default(autoincrement())
  woNo        String          @unique
  assetId     BigInt
  type        MaintenanceType
  status      WorkOrderStatus @default(OPEN)
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  cost        Decimal         @default(0)
  technician  String?
  notes       String?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  RepairLog RepairLog[]

  @@index([assetId, status])
}

model RepairLog {
  id          BigInt   @id @default(autoincrement())
  assetId     BigInt
  woId        BigInt?
  description String
  repairedAt  DateTime @default(now())
  cost        Decimal  @default(0)
  notes       String?

  asset     Asset                 @relation(fields: [assetId], references: [id], onDelete: Cascade)
  workOrder MaintenanceWorkOrder? @relation(fields: [woId], references: [id], onDelete: SetNull)

  @@index([assetId, repairedAt])
}

model AssetTransfer {
  id        BigInt   @id @default(autoincrement())
  assetId   BigInt
  fromLocId BigInt?
  toLocId   BigInt
  movedAt   DateTime @default(now())
  notes     String?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model AssetDisposal {
  id           BigInt   @id @default(autoincrement())
  assetId      BigInt   @unique
  disposedAt   DateTime @default(now())
  reason       String?
  proceeds     Decimal?
  approvedById BigInt?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}
