generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * Enums
 * =========================
 */

enum PRStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  CLOSED
}

enum POStatus {
  OPEN
  PARTIAL
  RECEIVED
  CLOSED
  CANCELLED
}

enum AttachmentKind {
  DR // delivery receipt
  INVOICE // supplier invoice
  OTHER
}

/**
 * =========================
 * Vendors
 * =========================
 */

model Vendor {
  id        BigInt   @id @default(autoincrement())
  name      String   @unique
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  POs PO[]
}

/**
 * =========================
 * Purchase Requests
 * =========================
 */

model PR {
  id        BigInt   @id @default(autoincrement())
  prNo      String   @unique
  status    PRStatus @default(DRAFT)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lines PRLine[]
  PO    PO[]
}

model PRLine {
  id     BigInt  @id @default(autoincrement())
  prId   BigInt
  itemId BigInt
  qty    Int
  unit   String
  notes  String?

  PR PR @relation(fields: [prId], references: [id], onDelete: Cascade)
}

/**
 * =========================
 * Purchase Orders
 * =========================
 */

model PO {
  id        BigInt   @id @default(autoincrement())
  poNo      String   @unique
  prId      BigInt?
  vendorId  BigInt
  status    POStatus @default(OPEN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor      Vendor       @relation(fields: [vendorId], references: [id])
  PR          PR?          @relation(fields: [prId], references: [id])
  lines       POLine[]
  receipts    Receipt[]
  attachments Attachment[]
}

model POLine {
  id     BigInt  @id @default(autoincrement())
  poId   BigInt
  itemId BigInt
  qty    Int
  unit   String
  price  Decimal @default(0)
  notes  String?

  PO PO @relation(fields: [poId], references: [id], onDelete: Cascade)
}

/**
 * =========================
 * Receipts
 * =========================
 */

model Receipt {
  id         BigInt   @id @default(autoincrement())
  poId       BigInt
  drNo       String?
  invoiceNo  String?
  receivedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  PO          PO            @relation(fields: [poId], references: [id], onDelete: Cascade)
  lines       ReceiptLine[]
  attachments Attachment[]
  // (Optional) also prevent duplicate invoice numbers per PO:
  @@unique([poId, invoiceNo])

  // prevent double-posting same DR for a PO
  @@unique([poId, drNo])
}

model ReceiptLine {
  id         BigInt    @id @default(autoincrement())
  receiptId  BigInt
  itemId     BigInt
  toLocId    BigInt
  qty        Int
  lotNo      String?
  expiryDate DateTime?

  Receipt Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
}

/**
 * =========================
 * Attachment metadata
 * =========================
 */

model Attachment {
  id         BigInt         @id @default(autoincrement())
  kind       AttachmentKind
  fileName   String
  storageKey String // where the binary is stored (S3 key, local path, etc.)
  mimeType   String?
  size       Int?
  uploadedAt DateTime       @default(now())

  // either PO or Receipt (one of them must be set)
  poId      BigInt?
  receiptId BigInt?

  PO      PO?      @relation(fields: [poId], references: [id], onDelete: Cascade)
  Receipt Receipt? @relation(fields: [receiptId], references: [id], onDelete: Cascade)
}
