name: Deploy

on:
  workflow_run:
    workflows:
      - CI
    types:
      - completed

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout (metadata only)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Roll out to server
        uses: appleboy/ssh-action@v1.0.0
        env:
          APP_DIR: /home/log1.health-ease-hospital.com/public_html
          REPO_URL: https://github.com/xdlemar/capstone-node.git
          GIT_REF: ${{ github.event.workflow_run.head_branch }}
          GIT_SHA: ${{ github.event.workflow_run.head_sha }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES: ${{ secrets.JWT_EXPIRES }}
          AUTH_DB_URL: ${{ secrets.AUTH_DB_URL }}
          INVENTORY_DB_URL: ${{ secrets.INVENTORY_DB_URL }}
          PROCUREMENT_DB_URL: ${{ secrets.PROCUREMENT_DB_URL }}
          PLT_DB_URL: ${{ secrets.PLT_DB_URL }}
          DTRS_DB_URL: ${{ secrets.DTRS_DB_URL }}
          ALMS_DB_URL: ${{ secrets.ALMS_DB_URL }}
          AUTH_CORS_ORIGIN: ${{ secrets.AUTH_CORS_ORIGIN }}
          WEB_API_BASE_URL: ${{ secrets.WEB_API_BASE_URL }}
          GATEWAY_PORT: 8080
          AUTH_PORT: 4000
          INVENTORY_PORT: 4001
          PROCUREMENT_PORT: 4002
          PLT_PORT: 4005
          DTRS_PORT: 4006
          ALMS_PORT: 4007
          SSH_PORT: ${{ secrets.SERVER_PORT || '2298' }}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          envs: APP_DIR,REPO_URL,GIT_REF,GIT_SHA,JWT_SECRET,JWT_EXPIRES,AUTH_DB_URL,INVENTORY_DB_URL,PROCUREMENT_DB_URL,PLT_DB_URL,DTRS_DB_URL,ALMS_DB_URL,AUTH_CORS_ORIGIN,WEB_API_BASE_URL,GATEWAY_PORT,AUTH_PORT,INVENTORY_PORT,PROCUREMENT_PORT,PLT_PORT,DTRS_PORT,ALMS_PORT
          script: |
            set -euo pipefail

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            git config --global --add safe.directory "$APP_DIR"

            if [ ! -d .git ]; then
              git clone --branch "$GIT_REF" --depth 1 "$REPO_URL" .
            fi

            git fetch origin "$GIT_REF"
            git checkout "$GIT_REF"
            git reset --hard "$GIT_SHA"
            git clean -fdx

            npm ci
            for dir in inventory-svc procurement-svc auth-svc gateway plt-svc dtrs-svc alms-svc hospital-web; do
              npm ci --prefix "$dir"
            done

            cat > gateway/.env <<EOF
            PORT=$GATEWAY_PORT
            JWT_SECRET=$JWT_SECRET
            JWT_EXPIRES=$JWT_EXPIRES
            AUTH_URL=http://127.0.0.1:$AUTH_PORT
            INVENTORY_URL=http://127.0.0.1:$INVENTORY_PORT
            PROCUREMENT_URL=http://127.0.0.1:$PROCUREMENT_PORT
            PLT_URL=http://127.0.0.1:$PLT_PORT
            DTRS_URL=http://127.0.0.1:$DTRS_PORT
            ALMS_URL=http://127.0.0.1:$ALMS_PORT
            EOF

            cat > auth-svc/.env <<EOF
            PORT=$AUTH_PORT
            DATABASE_URL=$AUTH_DB_URL
            JWT_SECRET=$JWT_SECRET
            JWT_EXPIRES=$JWT_EXPIRES
            CORS_ORIGIN="${AUTH_CORS_ORIGIN:-*}"
            EOF

            cat > inventory-svc/.env <<EOF
            PORT=$INVENTORY_PORT
            DATABASE_URL=$INVENTORY_DB_URL
            ALERT_EXPIRY_DAYS=30
            JWT_SECRET=$JWT_SECRET
            JWT_EXPIRES=$JWT_EXPIRES
            EOF

            cat > procurement-svc/.env <<EOF
            PORT=$PROCUREMENT_PORT
            DATABASE_URL=$PROCUREMENT_DB_URL
            INVENTORY_URL=http://127.0.0.1:$INVENTORY_PORT
            JWT_SECRET=$JWT_SECRET
            JWT_EXPIRES=$JWT_EXPIRES
            EOF

            cat > plt-svc/.env <<EOF
            PORT=$PLT_PORT
            DATABASE_URL=$PLT_DB_URL
            JWT_SECRET=$JWT_SECRET
            JWT_EXPIRES=$JWT_EXPIRES
            EOF

            cat > dtrs-svc/.env <<EOF
            PORT=$DTRS_PORT
            DATABASE_URL=$DTRS_DB_URL
            JWT_SECRET=$JWT_SECRET
            JWT_EXPIRES=$JWT_EXPIRES
            EOF

            cat > alms-svc/.env <<EOF
            PORT=$ALMS_PORT
            DATABASE_URL=$ALMS_DB_URL
            JWT_SECRET=$JWT_SECRET
            JWT_EXPIRES=$JWT_EXPIRES
            EOF

            if [ -n "${WEB_API_BASE_URL:-}" ]; then
              cat > hospital-web/.env.production <<EOF
            VITE_API_BASE_URL=$WEB_API_BASE_URL
            EOF
            fi

            NODE_ENV=production npm --prefix hospital-web run build

            rm -rf frontend-build
            mkdir -p frontend-build
            cp -a hospital-web/dist/. frontend-build/
            rm -f index.html
            rm -rf assets
            cp -a frontend-build/index.html ./
            cp -a frontend-build/assets ./

            cat > .htaccess <<EOF
            RewriteEngine On
            RewriteBase /
            RewriteRule ^api/(.*)$ http://127.0.0.1:$GATEWAY_PORT/api/$1 [P,L]
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteRule . index.html [L]
            EOF


            services=(inventory-svc procurement-svc auth-svc plt-svc dtrs-svc alms-svc)
            for svc in "${services[@]}"; do
              db_url=""
              if [ "$svc" = 'inventory-svc' ]; then
                db_url="$INVENTORY_DB_URL"
              elif [ "$svc" = 'procurement-svc' ]; then
                db_url="$PROCUREMENT_DB_URL"
              elif [ "$svc" = 'auth-svc' ]; then
                db_url="$AUTH_DB_URL"
              elif [ "$svc" = 'plt-svc' ]; then
                db_url="$PLT_DB_URL"
              elif [ "$svc" = 'dtrs-svc' ]; then
                db_url="$DTRS_DB_URL"
              elif [ "$svc" = 'alms-svc' ]; then
                db_url="$ALMS_DB_URL"
              else
                echo "Unknown service $svc" >&2
                exit 1
              fi
              (
                cd "$svc"
                DATABASE_URL="$db_url" npx prisma generate
                DATABASE_URL="$db_url" npx prisma migrate deploy
              )
            done

            npm prune --omit=dev
            for dir in inventory-svc procurement-svc auth-svc gateway plt-svc dtrs-svc alms-svc hospital-web; do
              npm prune --prefix "$dir" --omit=dev || true
            done

            if command -v pm2 >/dev/null 2>&1; then
              pm2 startOrReload ecosystem.config.js --update-env
              pm2 save || true
              pm2 status
            else
              echo "PM2 not installed on remote host; skipping restart"
            fi
