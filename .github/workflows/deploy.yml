name: deploy

on:
  workflow_run:
    workflows: ["ci"]
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout (for metadata only)
        uses: actions/checkout@v4

      - name: Roll out to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 2298
          script_stop: true
          script: |
            set -euo pipefail

            APP_DIR="/home/log1.health-ease-hospital.com/public_html"
            REPO_URL="https://github.com/xdlemar/capstone-node.git"
            BRANCH="main"

            echo "==> Ensure application directory"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            git config --global --add safe.directory "$APP_DIR"

            if [ -d .git ]; then
              echo "==> Fetch latest commit"
              git fetch origin "$BRANCH"
              git reset --hard "origin/${BRANCH}"
            else
              echo "==> Clone repository"
              git clone "$REPO_URL" .
              git checkout "$BRANCH"
            fi

            echo "==> Install dependencies"
            npm ci
            npm --prefix inventory-svc ci
            npm --prefix procurement-svc ci
            npm --prefix auth-svc ci
            npm --prefix gateway ci
            npm --prefix plt-svc ci
            npm --prefix dtrs-svc ci
            npm --prefix alms-svc ci
            npm --prefix hospital-web ci

            echo "==> Generate Prisma clients"
            npm run gen:clients

            echo "==> Write service environment files"
            cat <<EOF > gateway/.env
              PORT=8080
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }}
              AUTH_URL=http://127.0.0.1:4000
              INVENTORY_URL=http://127.0.0.1:4001
              PROCUREMENT_URL=http://127.0.0.1:4002
              PLT_URL=http://127.0.0.1:4005
              DTRS_URL=http://127.0.0.1:4006
              ALMS_URL=http://127.0.0.1:4007
              EOF

                          cat <<EOF > auth-svc/.env
              PORT=4000
              DATABASE_URL=${{ secrets.AUTH_DB_URL }}
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }}
              CORS_ORIGIN=${{ secrets.AUTH_CORS_ORIGIN }}
              EOF

                          cat <<EOF > inventory-svc/.env
              PORT=4001
              DATABASE_URL=${{ secrets.INVENTORY_DB_URL }}
              ALERT_EXPIRY_DAYS=30
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }}
              EOF

                          cat <<EOF > procurement-svc/.env
              PORT=4002
              DATABASE_URL=${{ secrets.PROCUREMENT_DB_URL }}
              INVENTORY_URL=http://127.0.0.1:4001
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }}
              EOF

                          cat <<EOF > plt-svc/.env
              PORT=4005
              DATABASE_URL=${{ secrets.PLT_DB_URL }}
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }}
              EOF

                          cat <<EOF > dtrs-svc/.env
              PORT=4006
              DATABASE_URL=${{ secrets.DTRS_DB_URL }}
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }}
              EOF

                          cat <<EOF > alms-svc/.env
              PORT=4007
              DATABASE_URL=${{ secrets.ALMS_DB_URL }}
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }}
              EOF

              echo "==> Build SPA"
              NODE_ENV=production npm --prefix hospital-web run build

              echo "==> Apply database migrations"
              DATABASE_URL="${{ secrets.INVENTORY_DB_URL }}"   npx prisma migrate deploy --schema=inventory-svc/prisma/schema.prisma
              DATABASE_URL="${{ secrets.PROCUREMENT_DB_URL }}" npx prisma migrate deploy --schema=procurement-svc/prisma/schema.prisma
              DATABASE_URL="${{ secrets.AUTH_DB_URL }}"        npx prisma migrate deploy --schema=auth-svc/prisma/schema.prisma
              DATABASE_URL="${{ secrets.PLT_DB_URL }}"         npx prisma migrate deploy --schema=plt-svc/prisma/schema.prisma
              DATABASE_URL="${{ secrets.DTRS_DB_URL }}"        npx prisma migrate deploy --schema=dtrs-svc/prisma/schema.prisma
              DATABASE_URL="${{ secrets.ALMS_DB_URL }}"        npx prisma migrate deploy --schema=alms-svc/prisma/schema.prisma

              echo "==> Restart services with PM2"
              if command -v pm2 >/dev/null 2>&1; then
                pm2 startOrReload ecosystem.config.js --update-env || true
                pm2 save || true
                pm2 status
              else
                echo "PM2 not found; skipping restart"
              fi
