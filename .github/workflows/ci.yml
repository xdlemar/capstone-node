name: ci
on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      # DB in CI (single runner VM)
      DB_USER: postgres
      DB_PASS: 'Masterpogi09?'         # raw for Postgres container & psql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_PASS_URL: 'Masterpogi09%3F'   # URL-encoded for DATABASE_URL

      # Service URLs (inside runner)
      INVENTORY_URL:   http://localhost:4001
      PROCUREMENT_URL: http://localhost:4002
      AUTH_URL:        http://localhost:4003
      GATEWAY_URL:     http://localhost:8080

      # Shared secret for gateway
      JWT_SECRET: super_secret_dev

    services:
      postgres:
        image: postgres:16
        env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: 'Masterpogi09?'   # must match DB_PASS (raw)
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps (root & services)
        run: |
          npm ci
          npm --prefix inventory-svc ci
          npm --prefix procurement-svc ci
          npm --prefix auth-svc ci
          npm --prefix gateway ci

      - name: Create DBs
        run: |
          psql "postgresql://${{ env.DB_USER }}:${{ env.DB_PASS }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}" -c 'CREATE DATABASE "inventory";'   || true
          psql "postgresql://${{ env.DB_USER }}:${{ env.DB_PASS }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}" -c 'CREATE DATABASE "procurement";' || true
          psql "postgresql://${{ env.DB_USER }}:${{ env.DB_PASS }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}" -c 'CREATE DATABASE "auth";'        || true

      - name: Generate Prisma clients
        run: npm run gen:clients

      - name: Run migrations (explicit URLs)
        run: |
          DATABASE_URL="postgresql://${{ env.DB_USER }}:${{ env.DB_PASS_URL }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/inventory?schema=public" \
          npx prisma migrate deploy --schema=inventory-svc/prisma/schema.prisma

          DATABASE_URL="postgresql://${{ env.DB_USER }}:${{ env.DB_PASS_URL }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/procurement?schema=public" \
          npx prisma migrate deploy --schema=procurement-svc/prisma/schema.prisma

          DATABASE_URL="postgresql://${{ env.DB_USER }}:${{ env.DB_PASS_URL }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/auth?schema=public" \
          npx prisma migrate deploy --schema=auth-svc/prisma/schema.prisma

      - name: Start services (backends first, then gateway)
        run: |
          # inventory (4001)
          export PORT=4001 DATABASE_URL="postgresql://${{ env.DB_USER }}:${{ env.DB_PASS_URL }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/inventory?schema=public"
          node inventory-svc/src/server.js > inv.log 2>&1 &

          # procurement (4002)
          export PORT=4002 DATABASE_URL="postgresql://${{ env.DB_USER }}:${{ env.DB_PASS_URL }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/procurement?schema=public"
          node procurement-svc/src/server.js > proc.log 2>&1 &

          # auth (4003)
          export PORT=4003 DATABASE_URL="postgresql://${{ env.DB_USER }}:${{ env.DB_PASS_URL }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/auth?schema=public"
          node auth-svc/src/server.js > auth.log 2>&1 &

          # wait for backends
          npx -y wait-on -t 60000 \
            "${{ env.INVENTORY_URL }}/health" \
            "${{ env.PROCUREMENT_URL }}/health" \
            "${{ env.AUTH_URL }}/health"

          # gateway (8080) depends on backends
          export PORT=8080 \
                 INVENTORY_URL="${{ env.INVENTORY_URL }}" \
                 PROCUREMENT_URL="${{ env.PROCUREMENT_URL }}" \
                 AUTH_URL="${{ env.AUTH_URL }}" \
                 JWT_SECRET="${{ env.JWT_SECRET }}"
          node gateway/src/index.js > gw.log 2>&1 &

          # wait for gateway
          npx -y wait-on -t 60000 "${{ env.GATEWAY_URL }}/health"

      - name: Seed minimal master data
        run: node tests/seedInventory.js

      - name: Run tests
        run: npm test

      - name: Smoke
        run: npm run smoke

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: svc-logs
          path: |
            inv.log
            proc.log
            auth.log
            gw.log
