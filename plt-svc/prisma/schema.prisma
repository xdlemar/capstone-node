generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeliveryStatus {
  DRAFT
  DISPATCHED
  IN_TRANSIT
  DELAYED
  DELIVERED
  CANCELLED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Project {
  id          BigInt        @id @default(autoincrement())
  code        String        @unique
  name        String
  status      ProjectStatus @default(PLANNING)
  managerId   BigInt?
  budget      Decimal?
  startsOn    DateTime?
  endsOn      DateTime?
  description String?

  deliveries Delivery[]
  materials  ProjectMaterialAlloc[]
  costs      ProjectCost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id         BigInt         @id @default(autoincrement())
  projectId  BigInt
  poId       BigInt?
  vendorId   BigInt?
  status     DeliveryStatus @default(DRAFT)
  trackingNo String?
  eta        DateTime?
  departedAt DateTime?
  arrivedAt  DateTime?
  lastKnown  String?
  notes      String?

  project Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  updates DeliveryUpdate[]
  photos  DeliveryPhoto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, status])
}

model DeliveryUpdate {
  id         BigInt         @id @default(autoincrement())
  deliveryId BigInt
  status     DeliveryStatus
  message    String?
  place      String?
  occurredAt DateTime       @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId, occurredAt])
}

model DeliveryPhoto {
  id         BigInt   @id @default(autoincrement())
  deliveryId BigInt
  fileName   String
  storageKey String
  mimeType   String?
  size       Int?
  uploadedAt DateTime @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

model ProjectMaterialAlloc {
  id         BigInt  @id @default(autoincrement())
  projectId  BigInt
  itemId     BigInt
  qtyPlanned Decimal @default(0)
  qtyIssued  Decimal @default(0)
  unit       String
  notes      String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, itemId])
  @@index([itemId])
}

model ProjectCost {
  id         BigInt   @id @default(autoincrement())
  projectId  BigInt
  sourceType String // "PO" | "RECEIPT" | "DELIVERY" | "ISSUE" | "OTHER"
  sourceId   BigInt?
  amount     Decimal  @default(0)
  notes      String?
  occurredAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, occurredAt])
}
